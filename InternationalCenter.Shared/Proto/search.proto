syntax = "proto3";

package international_center.search;

option csharp_namespace = "InternationalCenter.Shared.Proto.Search";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "Proto/common.proto";

// Unified search result item
message SearchResult {
  string id = 1;
  string title = 2;
  string slug = 3;
  string excerpt = 4;
  string content_type = 5; // news, research, service, event
  string category = 6;
  string image_url = 7;
  google.protobuf.Timestamp published_at = 8;
  google.protobuf.Timestamp created_at = 9;
  float relevance_score = 10;
  repeated string tags = 11;
  string author = 12;
  string url = 13;
  map<string, string> metadata = 14;
}

// Search facet for filtering
message SearchFacet {
  string name = 1;
  string display_name = 2;
  repeated SearchFacetValue values = 3;
}

message SearchFacetValue {
  string value = 1;
  string display_value = 2;
  int64 count = 3;
  bool selected = 4;
}

// Search suggestion
message SearchSuggestion {
  string query = 1;
  string highlighted = 2;
  int64 result_count = 3;
  string type = 4; // query_completion, spelling_correction, related_search
}

// Request messages
message UnifiedSearchRequest {
  string query = 1;
  international_center.common.PaginationRequest pagination = 2;
  international_center.common.SortOptions sort = 3;
  SearchFilters filters = 4;
  bool include_facets = 5;
  bool include_suggestions = 6;
}

message GetSearchSuggestionsRequest {
  string query = 1;
  int32 limit = 2;
  repeated string content_types = 3;
}

message GetPopularSearchesRequest {
  int32 limit = 1;
  int32 days = 2; // popular searches in last N days
}

message SearchFilters {
  repeated string content_types = 1; // news, research, service, event
  repeated string categories = 2;
  google.protobuf.Timestamp from_date = 3;
  google.protobuf.Timestamp to_date = 4;
  repeated string tags = 5;
  google.protobuf.StringValue author = 6;
  google.protobuf.FloatValue min_relevance = 7;
}

// Response messages
message UnifiedSearchResponse {
  repeated SearchResult results = 1;
  international_center.common.PaginationResponse pagination = 2;
  string query = 3;
  repeated SearchFacet facets = 4;
  repeated SearchSuggestion suggestions = 5;
  int64 total_time_ms = 6;
  SearchStats stats = 7;
}

message SearchStats {
  map<string, int64> results_by_type = 1;
  map<string, int64> results_by_category = 2;
  float avg_relevance_score = 3;
}

message GetSearchSuggestionsResponse {
  repeated SearchSuggestion suggestions = 1;
}

message GetPopularSearchesResponse {
  repeated PopularSearch searches = 1;
}

message PopularSearch {
  string query = 1;
  int64 search_count = 2;
  int64 result_count = 3;
  google.protobuf.Timestamp last_searched = 4;
}

// Real-time search analytics
message SearchAnalyticsEvent {
  string session_id = 1;
  string query = 2;
  int64 result_count = 3;
  google.protobuf.Timestamp timestamp = 4;
  string user_agent = 5;
  string source = 6; // web, mobile, api
  repeated string clicked_results = 7;
  int64 search_time_ms = 8;
}

// Search service definition
service SearchService {
  // Unified search across all content types
  rpc UnifiedSearch(UnifiedSearchRequest) returns (UnifiedSearchResponse);
  
  // Get search suggestions as user types
  rpc GetSearchSuggestions(GetSearchSuggestionsRequest) returns (GetSearchSuggestionsResponse);
  
  // Get popular searches for trending/autocomplete
  rpc GetPopularSearches(GetPopularSearchesRequest) returns (GetPopularSearchesResponse);
  
  // Stream search results for real-time updates
  rpc StreamSearchResults(UnifiedSearchRequest) returns (stream SearchResult);
  
  // Stream search analytics for monitoring
  rpc StreamSearchAnalytics(international_center.common.HealthCheckRequest) returns (stream SearchAnalyticsEvent);
  
  // Health check
  rpc HealthCheck(international_center.common.HealthCheckRequest) returns (international_center.common.HealthCheckResponse);
}