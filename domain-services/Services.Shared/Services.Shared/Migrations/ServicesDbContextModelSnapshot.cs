// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Services.Shared.Infrastructure.Data;

#nullable disable

namespace Services.Shared.Migrations
{
    [DbContext(typeof(ServicesDbContext))]
    partial class ServicesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Services.Shared.Entities.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<bool>("Featured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnName("priority")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.OwnsOne("Services.Shared.ValueObjects.ServiceMetadata", "Metadata", b1 =>
                        {
                            b1.Property<string>("DeliveryModes")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("delivery_modes");

                            b1.Property<string>("Features")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("features");

                            b1.Property<string>("Icon")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasDefaultValue("")
                                .HasColumnName("icon");

                            b1.Property<string>("Image")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasDefaultValue("")
                                .HasColumnName("image");

                            b1.Property<string>("MetaDescription")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasDefaultValue("")
                                .HasColumnName("meta_description");

                            b1.Property<string>("MetaTitle")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasDefaultValue("")
                                .HasColumnName("meta_title");

                            b1.Property<string>("Technologies")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("technologies");
                        });

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_services_CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_services_Slug");

                    b.ToTable("services");
                });

            modelBuilder.Entity("Services.Shared.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Active", "DisplayOrder")
                        .HasDatabaseName("IX_ServiceCategories_Performance");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_service_categories_Slug");

                    b.ToTable("service_categories");
                });

            modelBuilder.Entity("Services.Shared.Entities.Service", b =>
                {
                    b.HasOne("Services.Shared.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("ServiceCategory");
                });
#pragma warning restore 612, 618
        }
    }
}